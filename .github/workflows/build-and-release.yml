name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Test DingTalk notification (optional)
      run: |
        echo "Testing DingTalk integration..."
        python source/test_dingtalk.py || echo "DingTalk test skipped - webhook not configured"

  build-linux:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build Linux executables
      run: |
        pyinstaller --onefile source/network_monitor.py --name NetworkMonitor-CLI-Linux
        pyinstaller --onefile source/network_monitor_gui.py --name NetworkMonitor-GUI-Linux

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-builds
        path: |
          dist/NetworkMonitor-CLI-Linux
          dist/NetworkMonitor-GUI-Linux

  build-windows:
    needs: test
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build Windows executables
      run: |
        pyinstaller --onefile source/network_monitor.py --name NetworkMonitor-CLI-Windows
        pyinstaller --onefile --windowed source/network_monitor_gui.py --name NetworkMonitor-GUI-Windows

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-builds
        path: |
          dist/NetworkMonitor-CLI-Windows.exe
          dist/NetworkMonitor-GUI-Windows.exe

  build-macos:
    needs: test
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build macOS executables
      run: |
        pyinstaller --onefile source/network_monitor.py --name NetworkMonitor-CLI-macOS
        pyinstaller --onefile --windowed source/network_monitor_gui.py --name NetworkMonitor-GUI-macOS

    - name: Make macOS executables executable and create app bundle
      run: |
        chmod +x dist/NetworkMonitor-CLI-macOS
        chmod +x dist/NetworkMonitor-GUI-macOS

        # Create app bundle for GUI version
        mkdir -p dist/NetworkMonitor.app/Contents/MacOS
        mkdir -p dist/NetworkMonitor.app/Contents/Resources

        # Copy executable
        cp dist/NetworkMonitor-GUI-macOS dist/NetworkMonitor.app/Contents/MacOS/NetworkMonitor
        chmod +x dist/NetworkMonitor.app/Contents/MacOS/NetworkMonitor

        # Create Info.plist
        cat > dist/NetworkMonitor.app/Contents/Info.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>NetworkMonitor</string>
            <key>CFBundleIdentifier</key>
            <string>com.easonwangs.networkmonitor</string>
            <key>CFBundleName</key>
            <string>Network Monitor</string>
            <key>CFBundleVersion</key>
            <string>1.0</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>LSUIElement</key>
            <true/>
        </dict>
        </plist>
        EOF

    - name: Create DMG installer for macOS
      run: |
        # Create a temporary directory for DMG contents
        mkdir -p dist/dmg-contents

        # Copy app bundle to DMG contents
        cp -r dist/NetworkMonitor.app dist/dmg-contents/

        # Copy CLI executable to DMG contents
        cp dist/NetworkMonitor-CLI-macOS dist/dmg-contents/

        # Create README for DMG
        cat > dist/dmg-contents/README.txt << 'EOF'
        Network Monitor for macOS
        =========================

        Installation:
        1. Drag NetworkMonitor.app to your Applications folder
        2. For CLI usage, copy NetworkMonitor-CLI-macOS to /usr/local/bin/ (optional)

        Usage:
        - Double-click NetworkMonitor.app to run the GUI version
        - Use Terminal to run NetworkMonitor-CLI-macOS for command-line version

        Configuration:
        - See CONFIGURATION.md in the GitHub repository for setup details
        - Set DINGTALK_WEBHOOK environment variable for notifications

        For more information, visit:
        https://github.com/EasonWangs/network-monitor
        EOF

        # Create symbolic link to Applications folder
        ln -s /Applications dist/dmg-contents/Applications

        # Create DMG using hdiutil (available on macOS runners)
        hdiutil create -volname "Network Monitor" \
                       -srcfolder dist/dmg-contents \
                       -ov -format UDZO \
                       dist/NetworkMonitor-macOS.dmg

        # Clean up temporary directory
        rm -rf dist/dmg-contents

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-builds
        path: |
          dist/NetworkMonitor-CLI-macOS
          dist/NetworkMonitor-GUI-macOS
          dist/NetworkMonitor.app
          dist/NetworkMonitor-macOS.dmg

  release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: List downloaded files
      run: |
        echo "Downloaded artifacts:"
        find . -type f -name "*NetworkMonitor*" | sort
        echo "All files in current directory:"
        ls -la

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          **/NetworkMonitor-CLI-Linux
          **/NetworkMonitor-GUI-Linux
          **/NetworkMonitor-CLI-Windows.exe
          **/NetworkMonitor-GUI-Windows.exe
          **/NetworkMonitor-CLI-macOS
          **/NetworkMonitor-GUI-macOS
          **/NetworkMonitor.app
          **/NetworkMonitor-macOS.dmg
        generate_release_notes: true
        draft: false
        prerelease: false
        fail_on_unmatched_files: false